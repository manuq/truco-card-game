[gd_scene load_steps=7 format=3 uid="uid://ckv1ovd054ekp"]

[ext_resource type="Script" path="res://scenes/main.gd" id="1_5rl56"]
[ext_resource type="PackedScene" uid="uid://cfmoahalri06d" path="res://addons/player-networking/NetworkGateway.tscn" id="2_lyohe"]

[sub_resource type="Shader" id="Shader_ifxqe"]
code = "shader_type canvas_item;

uniform vec2 resolution = vec2(540.0, 960.0);
uniform vec3 line_color: source_color = vec3(1.0, 1.0, 1.0);
uniform float zoom: hint_range(1.0, 50.0, 0.1) = 20.0;
uniform float thickness: hint_range(0.1, 10.0, 0.1) = 2.0;
uniform vec2 velocity = vec2(0.03, 0.0);
uniform float rotation: hint_range(-1.0, 1.0, 0.1) = -0.1;
uniform float skew: hint_range(-1.0, 1.0, 0.1) = -0.1;

void vertex() {
	// Called for every vertex the material is visible on.
}

float draw_grid(vec2 uv) {
	vec2 grid_uv = cos(uv*TAU);
	return max(grid_uv.x, grid_uv.y);
}

vec2 rotate(vec2 uv, float angle) {
	return uv * mat2(vec2(cos(angle), -sin(angle)), vec2(sin(angle), cos(angle)));
	// return uv * mat2(vec2(-cos(angle) * 0.5, sin(angle)), vec2(sin(angle), cos(angle)));
}

void fragment() {
	vec2 uv = UV - 0.5;
	uv.x *= resolution.x / resolution.y;
	uv = rotate(uv, -rotation);
	uv.x += uv.y * skew;
	uv.x += TIME * velocity.x;
	uv.y += TIME * velocity.y;
	float line_thinkness = zoom * thickness / resolution.y;
	vec3 color = smoothstep(1.0 - line_thinkness, 1.0, draw_grid(uv * zoom)) * line_color;
	COLOR = vec4(color, 1.0);
}

void light() {
	// Called for every pixel for every light affecting the CanvasItem.
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_35p7q"]
shader = SubResource("Shader_ifxqe")
shader_parameter/resolution = Vector2(540, 960)
shader_parameter/line_color = Color(0.160784, 0.286275, 0.219608, 1)
shader_parameter/zoom = 20.0
shader_parameter/thickness = 2.0
shader_parameter/velocity = Vector2(0.03, 0)
shader_parameter/rotation = -0.1
shader_parameter/skew = -0.1

[sub_resource type="Shader" id="Shader_feqmv"]
code = "shader_type canvas_item;

uniform sampler2D screen_texture: hint_screen_texture, repeat_disable, filter_linear_mipmap;
uniform float blur_radius : hint_range(0, 1) = 0.2; // Radius of the blur effect
uniform float blur_amount : hint_range(0, 5) = 1.0; // Strength of the blur effect
uniform float blur_inner : hint_range(0, 1) = 0.6; // Inner edge of the blur effect
uniform float blur_outer : hint_range(0, 1) = 0.66; // Outer edge of the blur effect

void fragment() {
    // Original color of the pixel from the screen
    vec4 pixelColor = texture(screen_texture, UV);
    
    // Color with blur effect from the screen
    vec4 blurColor = textureLod(screen_texture, SCREEN_UV, blur_amount);

    // Calculate distance from the center of the screen
    float distance = length(UV - vec2(0.5, 0.5));

    // Apply smoothstep function to control transition between areas
    float blur = smoothstep(blur_inner - blur_radius, blur_outer, distance);

    // Mix colors of the blur effect and the original color based on the smoothstep value
    pixelColor.rgb = mix(blurColor.rgb, COLOR.rgb, -blur);

    // Set the alpha component of the blur effect to the smoothstep value
    blurColor.a = blur;

    // Mix colors of the blur effect with white for an additional effect
    blurColor.rgb = mix(blurColor.rgb, vec3(0.161, 0.286, 0.22), 0.241);

    // Set the final color to the modified color of the blur effect
    COLOR = blurColor;
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_ehl3f"]
shader = SubResource("Shader_feqmv")
shader_parameter/blur_radius = 0.471
shader_parameter/blur_amount = 2.434
shader_parameter/blur_inner = 0.6
shader_parameter/blur_outer = 0.66

[node name="Main" type="Node2D"]
script = ExtResource("1_5rl56")

[node name="MainLayer" type="CanvasLayer" parent="."]
unique_name_in_owner = true

[node name="ColorRect" type="ColorRect" parent="MainLayer"]
unique_name_in_owner = true
material = SubResource("ShaderMaterial_35p7q")
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2

[node name="BackBufferCopy" type="BackBufferCopy" parent="MainLayer"]
position = Vector2(273.5, 305.5)
scale = Vector2(2.345, 2.395)
copy_mode = 2

[node name="ColorRect2" type="ColorRect" parent="MainLayer"]
material = SubResource("ShaderMaterial_ehl3f")
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2

[node name="NetworkGateway" parent="MainLayer" instance=ExtResource("2_lyohe")]
unique_name_in_owner = true
offset_left = 7.0
offset_top = 0.0
offset_right = 645.0
offset_bottom = 297.0
scale = Vector2(0.6, 0.6)

[node name="CenterContainer" type="CenterContainer" parent="MainLayer"]
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2

[node name="SubViewportContainer" type="SubViewportContainer" parent="MainLayer/CenterContainer"]
layout_mode = 2

[node name="SubViewport" type="SubViewport" parent="MainLayer/CenterContainer/SubViewportContainer"]
unique_name_in_owner = true
disable_3d = true
transparent_bg = true
handle_input_locally = false
size = Vector2i(540, 960)
render_target_update_mode = 4
